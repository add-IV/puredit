[
  {
    "type": "packageExtension",
    "package": "py-polars",
    "rootProjections": [
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:Create",
        "description": "Create a new dataframe.",
        "isExpression": true,
        "template": "<%pl%>.DataFrame(<%dataSource%>)",
        "segmentWidgets": ["Create new dataframe from variable <%dataSource%>"],
        "parameters": [
          {
            "type": "contextVariable",
            "name": "pl"
          },
          {
            "type": "argument",
            "name": "dataSource",
            "nodeTypes": ["identifier"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:CreateFromCsv",
        "description": "Create a new dataframe from CSV.",
        "isExpression": true,
        "template": "<%pl%>.read_csv(<%filePath%>)",
        "segmentWidgets": ["New dataframe from CSV file <%filePath%>"],
        "parameters": [
          {
            "type": "contextVariable",
            "name": "pl"
          },
          {
            "type": "argument",
            "name": "filePath",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:CreateFromNdjson",
        "description": "Create a new dataframe from CSV.",
        "isExpression": true,
        "template": "<%pl%>.read_ndjson(<%filePath%>)",
        "segmentWidgets": ["New dataframe from NDJSON file <%filePath%>"],
        "parameters": [
          {
            "type": "contextVariable",
            "name": "pl"
          },
          {
            "type": "argument",
            "name": "filePath",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:CreateLazy",
        "description": "Create a new lazyframe.",
        "isExpression": true,
        "template": "<%pl%>.LazyFrame(<%dataSource%>)",
        "segmentWidgets": ["Create new lazyframe from variable <%dataSource%>"],
        "parameters": [
          {
            "type": "contextVariable",
            "name": "pl"
          },
          {
            "type": "argument",
            "name": "dataSource",
            "nodeTypes": ["identifier"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:CreateLazyFromCsv",
        "description": "Create a new lazyframe from CSV.",
        "isExpression": true,
        "template": "<%pl%>.scan_csv(<%filePath%>)",
        "segmentWidgets": ["New lazyframe from CSV file <%filePath%>"],
        "parameters": [
          {
            "type": "contextVariable",
            "name": "pl"
          },
          {
            "type": "argument",
            "name": "filePath",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:CreateLazyFromNdjson",
        "description": "Create a new lazyframe from NDJSON.",
        "isExpression": true,
        "template": "<%pl%>.scan_ndjson(<%filePath%>)",
        "segmentWidgets": ["New lazyframe from NDJSON file <%filePath%>"],
        "parameters": [
          {
            "type": "contextVariable",
            "name": "pl"
          },
          {
            "type": "argument",
            "name": "filePath",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:WriteCsv",
        "description": "Write a dataframe to CSV.",
        "isExpression": true,
        "template": "<%dataSource%>.write_csv(<%targetPath%>)",
        "segmentWidgets": ["Write dataframe <%dataSource%> as CSV to path <%targetPath%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "dataSource",
            "nodeTypes": ["identifier"]
          },
          {
            "type": "argument",
            "name": "targetPath",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:WriteNdjson",
        "description": "Write a dataframe to NDJSON.",
        "isExpression": true,
        "template": "<%dataSource%>.write_ndjson(<%targetPath%>)",
        "segmentWidgets": ["Write dataframe <%dataSource%> as NDJSON to path <%targetPath%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "dataSource",
            "nodeTypes": ["identifier"]
          },
          {
            "type": "argument",
            "name": "targetPath",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:WriteParquet",
        "description": "Write a dataframe to Parquet.",
        "isExpression": true,
        "template": "<%dataSource%>.write_parquet(<%targetPath%>)",
        "segmentWidgets": ["Write dataframe <%dataSource%> as Parquet to path <%targetPath%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "dataSource",
            "nodeTypes": ["identifier"]
          },
          {
            "type": "argument",
            "name": "targetPath",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:Describe",
        "description": "Describe a dataframe by summary statistics.",
        "isExpression": false,
        "template": "<%dataframe%>.describe()",
        "segmentWidgets": ["Describe dataframe <%dataframe%> with summary statistics"],
        "parameters": [
          {
            "type": "argument",
            "name": "dataframe",
            "nodeTypes": ["identifier"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:Head",
        "description": "Get the first n lines (head) of the dataframe.",
        "isExpression": true,
        "template": "<%dataframe%>.head(<%numberOfLines%>)",
        "segmentWidgets": ["Get the first <%numberOfLines%> lines of dataframe <%dataframe%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "numberOfLines",
            "nodeTypes": ["integer"]
          },
          {
            "type": "argument",
            "name": "dataframe",
            "nodeTypes": ["identifier"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:ShowGraph",
        "description": "Show a plot of the query plan.",
        "isExpression": true,
        "template": "<%dataframe%>.show_graph()",
        "segmentWidgets": ["Show a plot of the plan for lazyframe <%dataframe%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "dataframe",
            "nodeTypes": ["identifier"]
          }
        ]
      },
      {
        "type": "rootProjection",
        "name": "Polars:Dataframe:Explain",
        "description": "Create a string representation of the query plan.",
        "isExpression": true,
        "template": "<%dataframe%>.explain()",
        "segmentWidgets": ["String representation of the query plan for lazyframe <%dataframe%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "dataframe",
            "nodeTypes": ["identifier"]
          }
        ]
      }
    ]
  },
  {
    "type": "rootProjectionExtension",
    "package": "py-polars",
    "rootProjection": "Polars:Column:Chain",
    "parentParameter": "columnChain",
    "subProjections": [
      {
        "type": "chainLink",
        "name": "Polars:Column:Median",
        "description": "Take the median of a column.",
        "template": "median(<%column%>)",
        "segmentWidgets": ["<%column%> taking its median"],
        "parameters": [
          {
            "type": "argument",
            "name": "column",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Column:Mean",
        "description": "Take the mean of a column.",
        "template": "mean(<%column%>)",
        "segmentWidgets": ["<%column%> taking its mean"],
        "parameters": [
          {
            "type": "argument",
            "name": "column",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Column:Minimum",
        "description": "Find the minimum value in a column.",
        "template": "min(<%column%>)",
        "segmentWidgets": ["<%column%> finding its minimum"],
        "parameters": [
          {
            "type": "argument",
            "name": "column",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Column:Maximum",
        "description": "Find the maximum value in a column.",
        "template": "max(<%column%>)",
        "segmentWidgets": ["<%column%> finding its maximum"],
        "parameters": [
          {
            "type": "argument",
            "name": "column",
            "nodeTypes": ["string"]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Column:ReplaceValues",
        "description": "Replace values in a column.",
        "template": "replace(<%mappings%>, default=<%defaultValue%>)",
        "segmentWidgets": ["Replace values", "using default <%defaultValue%>"],
        "parameters": [
          {
            "type": "aggregation",
            "name": "mappings",
            "nodeType": "dictionary",
            "partSubProjections": [
              {
                "type": "aggregationPart",
                "name": "Polars:Column:ValueMapping",
                "description": "Value mapping for replacement in a column.",
                "template": "<%value%>: <%replacement%>",
                "segmentWidgets": ["<%value%> with <%replacement%>"],
                "parameters": [
                  {
                    "type": "argument",
                    "name": "value",
                    "nodeTypes": ["string", "integer"]
                  },
                  {
                    "type": "argument",
                    "name": "replacement",
                    "nodeTypes": ["string", "integer"]
                  }
                ]
              }
            ]
          },
          {
            "type": "argument",
            "name": "defaultValue",
            "nodeTypes": ["string", "integer"]
          }
        ]
      }
    ]
  },
  {
    "type": "rootProjectionExtension",
    "package": "py-polars",
    "rootProjection": "Polars:Dataframe:Chain",
    "parentParameter": "dataframeChain",
    "subProjections": [
      {
        "type": "chainLink",
        "name": "Polars:Dataframe:FilterEqual",
        "description": "Filter the rows of a dataframe where a column has a specific value.",
        "template": "filter(<%column%> == <%value%>)",
        "segmentWidgets": ["filtering columns where <%column%> is <%value%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "column",
            "nodeTypes": ["identifier"]
          },
          {
            "type": "argument",
            "name": "value",
            "nodeTypes": ["string", "integer"]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Dataframe:Sort",
        "description": "Sort the rows of a dataframe.",
        "template": "sort<%columnsAndSettings%>",
        "segmentWidgets": ["sorting by", "end sort"],
        "parameters": [
          {
            "type": "aggregation",
            "name": "columnsAndSettings",
            "nodeType": "argument_list",
            "partSubProjections": [
              {
                "type": "aggregationPartReference",
                "referencedProjection": "Polars:Column:Chain"
              }
            ]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Dataframe:ExtendMemory",
        "description": "Extend the memory backed by this dataframe with the values from other.",
        "template": "extend(<%otherDataFrame%>)",
        "segmentWidgets": ["extending with dataframe <%otherDataFrame%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "otherDataFrame",
            "nodeTypes": ["identifier"]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Dataframe:Clear",
        "description": "Create an n-row null-filled (n%>0) copy of the dataframe.",
        "template": "clear(n=<%numRows%>)",
        "segmentWidgets": ["creating a null-filled copy with <%numRows%> rows"],
        "parameters": [
          {
            "type": "argument",
            "name": "numRows",
            "nodeTypes": ["integer"]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Dataframe:Clone",
        "description": "Create a copy of this dataframe.",
        "parameters": [],
        "template": "clone()",
        "segmentWidgets": ["copying the dataframe"]
      },
      {
        "type": "chainLink",
        "name": "Polars:Dataframe:ReplaceNullsWithValue",
        "description": "Replace nulls with a specified value.",
        "template": "fill_null(<%value%>)",
        "segmentWidgets": ["replacing nulls with <%value%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "value",
            "nodeTypes": ["string", "integer"]
          }
        ]
      },
      {
        "type": "chainLink",
        "name": "Polars:Dataframe:ReplaceNullsWithStrategy",
        "description": "Replace null based on a strategy.",
        "template": "fill_null(strategy=<%strategy%>)",
        "segmentWidgets": ["replacing nulls with strategy <%strategy%>"],
        "parameters": [
          {
            "type": "argument",
            "name": "strategy",
            "nodeTypes": ["string", "identifier"]
          }
        ]
      }
    ]
  }
]
