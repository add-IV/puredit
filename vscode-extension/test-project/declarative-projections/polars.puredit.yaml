- type: projectionExtension
  package: py-polars
  parentProjection: Polars:Dataframe:SelectColumns
  parentParameter: columns
  subProjections:
  - type: aggregationPart
    name: Polars:CnColumn
    description: CN column
    template: CN.<%columnName%>
    segmentWidgets:
    - column <%columnName%>
    parameters:
    - type: argument
      name: columnName
      nodeTypes:
      - identifier

- type: projectionExtension
  package: py-polars
  parentProjection: Polars:Dataframe:GroupBy
  parentParameter: columns
  subProjections:
  - type: aggregationPartReference
    referencedProjection: Polars:CnColumn

- type: projectionExtension
  package: py-polars
  parentProjection: Polars:Dataframe:Chain
  parentParameter: dataframeChain
  subProjections:
  - type: chainLink
    name: Polars:Dataframe:SelectList
    description: Select CN columns
    template: select(<%columns%>)
    segmentWidgets:
      - "select columns"
      - "end columns"
    parameters:
      - type: aggregation
        name: columns
        nodeType: list
        partSubProjections:
          - type: aggregationPartReference
            referencedProjection: Polars:CnColumn
          - type: aggregationPartReference
            referencedProjection: Polars:Column

- package: py-polars
  type: packageExtension
  rootProjections:
  - name: Polars:Dataframe:Create
    type: rootProjection
    description: Create a new dataframe.
    isExpression: true
    template: "<%pl%>.DataFrame(<%dataSource%>)"
    segmentWidgets:
    - Create new dataframe from variable <%dataSource%>
    parameters:
    - name: pl
      type: contextVariable
    - name: dataSource
      type: argument
      nodeTypes:
      - identifier

  - name: Polars:Dataframe:CreateFromCsv
    type: rootProjection
    description: Create a new dataframe from CSV.
    isExpression: true
    template: "<%pl%>.read_csv(<%filePath%>)"
    segmentWidgets:
    - New dataframe from CSV file <%filePath%>
    parameters:
    - name: pl
      type: contextVariable
    - name: filePath
      type: argument
      nodeTypes:
      - string

  - name: Polars:Dataframe:CreateFromNdjson
    type: rootProjection
    description: Create a new dataframe from CSV.
    isExpression: true
    template: "<%pl%>.read_ndjson(<%filePath%>)"
    segmentWidgets:
    - New dataframe from NDJSON file <%filePath%>
    parameters:
    - name: pl
      type: contextVariable
    - name: filePath
      type: argument
      nodeTypes:
      - string

  - name: Polars:Dataframe:CreateLazy
    type: rootProjection
    description: Create a new lazyframe.
    isExpression: true
    template: "<%pl%>.LazyFrame(<%dataSource%>)"
    segmentWidgets:
    - Create new lazyframe from variable <%dataSource%>
    parameters:
    - name: pl
      type: contextVariable
    - name: dataSource
      type: argument
      nodeTypes:
      - identifier

  - name: Polars:Dataframe:CreateLazyFromCsv
    type: rootProjection
    description: Create a new lazyframe from CSV.
    isExpression: true
    template: "<%pl%>.scan_csv(<%filePath%>)"
    segmentWidgets:
    - New lazyframe from CSV file <%filePath%>
    parameters:
    - name: pl
      type: contextVariable
    - name: filePath
      type: argument
      nodeTypes:
      - string

  - name: Polars:Dataframe:CreateLazyFromNdjson
    type: rootProjection
    description: Create a new lazyframe from NDJSON.
    isExpression: true
    template: "<%pl%>.scan_ndjson(<%filePath%>)"
    segmentWidgets:
    - New lazyframe from NDJSON file <%filePath%>
    parameters:
    - name: pl
      type: contextVariable
    - name: filePath
      type: argument
      nodeTypes:
      - string

  - name: Polars:Dataframe:WriteCsv
    type: rootProjection
    description: Write a dataframe to CSV.
    isExpression: true
    template: "<%dataSource%>.write_csv(<%targetPath%>)"
    segmentWidgets:
    - Write dataframe <%dataSource%> as CSV to path <%targetPath%>
    parameters:
    - name: dataSource
      type: argument
      nodeTypes:
      - identifier
    - name: targetPath
      type: argument
      nodeTypes:
      - string

  - name: Polars:Dataframe:WriteNdjson
    type: rootProjection
    description: Write a dataframe to NDJSON.
    isExpression: true
    template: "<%dataSource%>.write_ndjson(<%targetPath%>)"
    segmentWidgets:
    - Write dataframe <%dataSource%> as NDJSON to path <%targetPath%>
    parameters:
    - name: dataSource
      type: argument
      nodeTypes:
      - identifier
    - name: targetPath
      type: argument
      nodeTypes:
      - string

  - name: Polars:Dataframe:WriteParquet
    type: rootProjection
    description: Write a dataframe to Parquet.
    isExpression: true
    template: "<%dataSource%>.write_parquet(<%targetPath%>)"
    segmentWidgets:
    - Write dataframe <%dataSource%> as Parquet to path <%targetPath%>
    parameters:
    - name: dataSource
      type: argument
      nodeTypes:
      - identifier
    - name: targetPath
      type: argument
      nodeTypes:
      - string

  - name: Polars:Dataframe:Describe
    type: rootProjection
    description: Describe a dataframe by summary statistics.
    isExpression: false
    template: "<%dataframe%>.describe()"
    segmentWidgets:
    - Describe dataframe <%dataframe%> with summary statistics
    parameters:
    - name: dataframe
      type: argument
      nodeTypes:
      - identifier

  - name: Polars:Dataframe:Head
    type: rootProjection
    description: Get the first n lines (head) of the dataframe.
    isExpression: true
    template: "<%dataframe%>.head(<%numberOfLines%>)"
    segmentWidgets:
    - Get the first <%numberOfLines%> lines of dataframe <%dataframe%>
    parameters:
    - name: numberOfLines
      type: argument
      nodeTypes:
      - integer
    - name: dataframe
      type: argument
      nodeTypes:
      - identifier

  - name: Polars:Dataframe:ShowGraph
    type: rootProjection
    description: Show a plot of the query plan.
    isExpression: true
    template: "<%dataframe%>.show_graph()"
    segmentWidgets:
    - Show a plot of the plan for lazyframe <%dataframe%>
    parameters:
    - name: dataframe
      type: argument
      nodeTypes:
      - identifier

  - name: Polars:Dataframe:Explain
    type: rootProjection
    description: Create a string representation of the query plan.
    isExpression: true
    template: "<%dataframe%>.explain()"
    segmentWidgets:
    - String representation of the query plan for lazyframe <%dataframe%>
    parameters:
    - type: argument
      name: dataframe
      nodeTypes:
      - identifier

- package: py-polars
  type: projectionExtension
  parentProjection: Polars:Column:Chain
  parentParameter: columnChain
  subProjections:
  - name: Polars:Column:Median
    type: chainLink
    description: Take the median of a column.
    template: median(<%column%>)
    segmentWidgets:
    - "<%column%> taking its median"
    parameters:
    - name: column
      type: argument
      nodeTypes:
      - string

  - name: Polars:Column:Mean
    type: chainLink
    description: Take the mean of a column.
    template: mean(<%column%>)
    segmentWidgets:
    - "<%column%> taking its mean"
    parameters:
    - name: column
      type: argument
      nodeTypes:
      - string

  - name: Polars:Column:Minimum
    type: chainLink
    description: Find the minimum value in a column.
    template: min(<%column%>)
    segmentWidgets:
    - "<%column%> finding its minimum"
    parameters:
    - name: column
      type: argument
      nodeTypes:
      - string

  - name: Polars:Column:Maximum
    type: chainLink
    description: Find the maximum value in a column.
    template: max(<%column%>)
    segmentWidgets:
    - "<%column%> finding its maximum"
    parameters:
    - name: column
      type: argument
      nodeTypes:
      - string

  - name: Polars:Column:ReplaceValues
    type: chainLink
    description: Replace values in a column.
    template: replace(<%mappings%>, default=<%defaultValue%>)
    segmentWidgets:
    - Replace values
    - using default <%defaultValue%>
    parameters:
    - name: mappings
      type: aggregation
      nodeType: dictionary
      partSubProjections:
      - name: Polars:Column:ValueMapping
        type: aggregationPart
        description: Value mapping for replacement in a column.
        template: "<%value%>: <%replacement%>"
        segmentWidgets:
        - "<%value%> with <%replacement%>"
        parameters:
        - name: value
          type: argument
          nodeTypes:
          - string
          - integer
        - name: replacement
          type: argument
          nodeTypes:
          - string
          - integer
    - name: defaultValue
      type: argument
      nodeTypes:
      - string
      - integer

- package: py-polars
  type: projectionExtension
  parentProjection: Polars:Dataframe:Chain
  parentParameter: dataframeChain
  subProjections:
  - name: Polars:Dataframe:FilterEqual
    type: chainLink
    description: Filter the rows of a dataframe where a column has a specific value.
    template: filter(<%column%>=<%value%>)
    segmentWidgets:
    - filtering columns where <%column%> is <%value%>
    parameters:
    - name: column
      type: argument
      nodeTypes:
      - identifier
    - name: value
      type: argument
      nodeTypes:
      - string
      - integer

  - name: Polars:Dataframe:Sort
    type: chainLink
    description: Sort the rows of a dataframe.
    template: sort<%columnsAndSettings%>
    segmentWidgets:
    - sorting by
    - end sort
    parameters:
    - name: columnsAndSettings
      type: aggregation
      nodeType: argument_list
      partSubProjections:
      - type: aggregationPartReference
        referencedProjection: Polars:Column:Chain
      - type: aggregationPartReference
        referencedProjection: Polars:Column

  - name: Polars:Dataframe:ExtendMemory
    type: chainLink
    description: Extend the memory backed by this dataframe with the values from other.
    template: extend(<%otherDataFrame%>)
    segmentWidgets:
    - extending with dataframe <%otherDataFrame%>
    parameters:
    - name: otherDataFrame
      type: argument
      nodeTypes:
      - identifier

  - name: Polars:Dataframe:Clear
    type: chainLink
    description: Create an n-row null-filled (n%>0) copy of the dataframe.
    template: clear(n=<%numRows%>)
    segmentWidgets:
    - creating a null-filled copy with <%numRows%> rows
    parameters:
    - name: numRows
      type: argument
      nodeTypes:
      - integer
  - name: Polars:Dataframe:Clone
    type: chainLink
    description: Create a copy of this dataframe.
    parameters: []
    template: clone()
    segmentWidgets:
    - copying the dataframe

  - name: Polars:Dataframe:ReplaceNullsWithValue
    type: chainLink
    description: Replace nulls with a specified value.
    template: fill_null(<%value%>)
    segmentWidgets:
    - replacing nulls with <%value%>
    parameters:
    - name: value
      type: argument
      nodeTypes:
      - string
      - integer

  - name: Polars:Dataframe:ReplaceNullsWithStrategy
    type: chainLink
    description: Replace null based on a strategy.
    template: fill_null(strategy=<%strategy%>)
    segmentWidgets:
    - replacing nulls with strategy <%strategy%>
    parameters:
    - name: strategy
      type: argument
      nodeTypes:
      - string
      - identifier
